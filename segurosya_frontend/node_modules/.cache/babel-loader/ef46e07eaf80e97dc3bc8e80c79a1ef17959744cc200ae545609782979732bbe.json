{"ast":null,"code":"//Importar variables\nimport { LINKSERVER } from '../../utiles/constantes.js';\nexport function obtenerUsuarios() {\n  return fetch(LINKSERVER + \"/api/cuenta/listarUsuarios\").then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.json();\n  }).catch(error => {\n    console.error('Error:', error);\n    throw error;\n  });\n}\nexport function cargaMasivaPrueba(archivo) {\n  //Utiles\n  const formData = new FormData();\n  formData.append('file', archivo);\n  return fetch(LINKSERVER + \"/api/listanegra/cargaPrueba\", {\n    method: \"POST\",\n    body: formData\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('File upload failed');\n    } else {\n      return response.text();\n    }\n  }).catch(error => {\n    console.error('Error Uploading File:', error);\n    throw error;\n  });\n}\nexport function eliminarUsuario(idCuenta) {\n  return fetch(LINKSERVER + \"/api/cuenta/desactivar\", {\n    method: \"DELETE\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      idCuenta: idCuenta\n    })\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    return response.text();\n  }).catch(error => {\n    console.error('Error:', error);\n    throw error;\n  });\n}\nexport function dividirPaginas(data, cantidadLineas) {\n  const result = [];\n  const length = data.length;\n  for (let i = 0; i < length; i += cantidadLineas) {\n    const block = data.slice(i, i + cantidadLineas);\n    result.push(block);\n  }\n  return result;\n}\nfunction obtenerNumeroDePaginas(numeroElementos, cantidadLineas) {\n  return Math.ceil(numeroElementos / cantidadLineas);\n}","map":{"version":3,"names":["LINKSERVER","obtenerUsuarios","fetch","then","response","ok","Error","json","catch","error","console","cargaMasivaPrueba","archivo","formData","FormData","append","method","body","text","eliminarUsuario","idCuenta","headers","JSON","stringify","dividirPaginas","data","cantidadLineas","result","length","i","block","slice","push","obtenerNumeroDePaginas","numeroElementos","Math","ceil"],"sources":["D:/PUCP/Ing Soft/Administrador_SegurosYA/segurosya_frontend/src/componentes/gestionUsuarios/funcionesExtras.js"],"sourcesContent":["//Importar variables\r\nimport { LINKSERVER } from '../../utiles/constantes.js';\r\n\r\nexport function obtenerUsuarios() {\r\nreturn fetch(LINKSERVER+\"/api/cuenta/listarUsuarios\")\r\n    .then(response => {\r\n    if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n    }\r\n        return response.json();\r\n    })\r\n    .catch(error => {\r\n        console.error('Error:', error);\r\n        throw error;\r\n        }\r\n    );\r\n}\r\n\r\nexport function cargaMasivaPrueba (archivo) {\r\n  //Utiles\r\n  const formData = new FormData();\r\n  formData.append('file',archivo);\r\n  return fetch(LINKSERVER+\"/api/listanegra/cargaPrueba\", {\r\n      method: \"POST\",\r\n      body: formData\r\n  })\r\n  .then(response => {\r\n      if (!response.ok) {\r\n          throw new Error('File upload failed');\r\n      }else{\r\n          return response.text();\r\n      }            \r\n  })\r\n  .catch(error => {\r\n      console.error('Error Uploading File:', error);\r\n      throw error;\r\n  });\r\n}\r\n\r\nexport function eliminarUsuario(idCuenta) {\r\n  return fetch(LINKSERVER+\"/api/cuenta/desactivar\",{\r\n    method: \"DELETE\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({idCuenta: idCuenta})\r\n  })\r\n  .then(response => {\r\n    if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n    }\r\n        return response.text();\r\n    })\r\n  .catch(error => {\r\n    console.error('Error:', error);\r\n    throw error;\r\n    }\r\n  );\r\n}\r\n\r\nexport function dividirPaginas(data, cantidadLineas) {\r\n    const result = [];\r\n    const length = data.length;\r\n  \r\n    for (let i = 0; i < length; i += cantidadLineas) {\r\n      const block = data.slice(i, i + cantidadLineas);\r\n      result.push(block);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  \r\n\r\n  function obtenerNumeroDePaginas(numeroElementos, cantidadLineas) {\r\n    return Math.ceil(numeroElementos / cantidadLineas);\r\n  }\r\n\r\n\r\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,4BAA4B;AAEvD,OAAO,SAASC,eAAeA,CAAA,EAAG;EAClC,OAAOC,KAAK,CAACF,UAAU,GAAC,4BAA4B,CAAC,CAChDG,IAAI,CAACC,QAAQ,IAAI;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACI,OAAOF,QAAQ,CAACG,IAAI,EAAE;EAC1B,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,MAAMA,KAAK;EACX,CAAC,CACJ;AACL;AAEA,OAAO,SAASE,iBAAiBA,CAAEC,OAAO,EAAE;EAC1C;EACA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE;EAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAACH,OAAO,CAAC;EAC/B,OAAOV,KAAK,CAACF,UAAU,GAAC,6BAA6B,EAAE;IACnDgB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEJ;EACV,CAAC,CAAC,CACDV,IAAI,CAACC,QAAQ,IAAI;IACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;IACzC,CAAC,MAAI;MACD,OAAOF,QAAQ,CAACc,IAAI,EAAE;IAC1B;EACJ,CAAC,CAAC,CACDV,KAAK,CAACC,KAAK,IAAI;IACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACf,CAAC,CAAC;AACJ;AAEA,OAAO,SAASU,eAAeA,CAACC,QAAQ,EAAE;EACxC,OAAOlB,KAAK,CAACF,UAAU,GAAC,wBAAwB,EAAC;IAC/CgB,MAAM,EAAE,QAAQ;IAChBK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDJ,IAAI,EAAEK,IAAI,CAACC,SAAS,CAAC;MAACH,QAAQ,EAAEA;IAAQ,CAAC;EAC3C,CAAC,CAAC,CACDjB,IAAI,CAACC,QAAQ,IAAI;IAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IACI,OAAOF,QAAQ,CAACc,IAAI,EAAE;EAC1B,CAAC,CAAC,CACHV,KAAK,CAACC,KAAK,IAAI;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,MAAMA,KAAK;EACX,CAAC,CACF;AACH;AAEA,OAAO,SAASe,cAAcA,CAACC,IAAI,EAAEC,cAAc,EAAE;EACjD,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,MAAM,GAAGH,IAAI,CAACG,MAAM;EAE1B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,EAAEC,CAAC,IAAIH,cAAc,EAAE;IAC/C,MAAMI,KAAK,GAAGL,IAAI,CAACM,KAAK,CAACF,CAAC,EAAEA,CAAC,GAAGH,cAAc,CAAC;IAC/CC,MAAM,CAACK,IAAI,CAACF,KAAK,CAAC;EACpB;EAEA,OAAOH,MAAM;AACf;AAGA,SAASM,sBAAsBA,CAACC,eAAe,EAAER,cAAc,EAAE;EAC/D,OAAOS,IAAI,CAACC,IAAI,CAACF,eAAe,GAAGR,cAAc,CAAC;AACpD"},"metadata":{},"sourceType":"module","externalDependencies":[]}